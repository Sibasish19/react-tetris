{"version":3,"sources":["components/styles/StyledTetris.js","helpers/tetrominos.js","helpers/index.js","hooks/useStage.js","hooks/useGameStatus.js","components/styles/StyledButton.js","components/Button.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledCard.js","components/Card.js","App.js","hooks/usePlayer.js","hooks/useInterval.js","index.js","assets/images/bg.png"],"names":["StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","linePoints","createStage","Array","from","fill","generateTetrominos","randChar","Math","floor","random","length","detectCollision","player","stage","moveX","x","moveY","y","tetromino","position","row","column","rotate","matrix","direction","rotatedMatrix","map","_","index","col","reverse","changeDropTimeWithLevel","level","pow","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","collided","updateStage","prevStage","newStage","cell","forEach","value","reduce","acc","curr","findIndex","prev","unshift","push","sweepRows","useGameStatus","score","setScore","rows","setRows","setLevel","populateScore","useCallback","calculateScore","StyledButton","button","Button","startGame","onClick","StyledStage","props","height","width","StyledCell","type","memo","Stage","key","StyledCard","gameOver","Card","text","App","dropTime","setDropTime","setGameOver","setPlayer","clonedPlayer","JSON","parse","stringify","xPosition","offset","usePlayer","updatePlayerPosition","rotatePlayer","movePlayerSideWise","drop","move","keyCode","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","console","log","role","tabIndex","onKeyDown","e","onKeyUp","onKeyDownRelease","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a429770d.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nimport bgImage from '../../assets/images/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n\tbackground: url(${bgImage}) #000;\r\n\tbackground-size: cover;\r\n\tbackground-position: center;\r\n\toverflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: flex-start;\r\n\tpadding: 0.5rem;\r\n\tmargin: 0.5rem auto;\r\n\tmax-width: 900px;\r\n\r\n\taside {\r\n\t\twidth: 100%;\r\n\t\tmax-width: 200px;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0 1rem;\r\n\t}\r\n`;\r\n","const TETROMINOS = {\r\n\t0: {\r\n\t\tshape: [[0]],\r\n\t\tcolor: '0, 0, 0'\r\n\t},\r\n\tI: {\r\n\t\tshape: [\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0],\r\n\t\t\t[0, 'I', 0, 0]\r\n\t\t],\r\n\t\tcolor: '80, 227, 230'\r\n\t},\r\n\tJ: {\r\n\t\tshape: [\r\n\t\t\t[0, 'J', 0],\r\n\t\t\t[0, 'J', 0],\r\n\t\t\t['J', 'J', 0]\r\n\t\t],\r\n\t\tcolor: '36, 95, 223'\r\n\t},\r\n\tL: {\r\n\t\tshape: [\r\n\t\t\t[0, 'L', 0],\r\n\t\t\t[0, 'L', 0],\r\n\t\t\t[0, 'L', 'L']\r\n\t\t],\r\n\t\tcolor: '223, 173, 36'\r\n\t},\r\n\tO: {\r\n\t\tshape: [\r\n\t\t\t['O', 'O'],\r\n\t\t\t['O', 'O']\r\n\t\t],\r\n\t\tcolor: '223, 217, 36'\r\n\t},\r\n\tS: {\r\n\t\tshape: [\r\n\t\t\t[0, 'S', 'S'],\r\n\t\t\t['S', 'S', 0],\r\n\t\t\t[0, 0, 0]\r\n\t\t],\r\n\t\tcolor: '48, 211, 56'\r\n\t},\r\n\tT: {\r\n\t\tshape: [\r\n\t\t\t[0, 0, 0],\r\n\t\t\t['T', 'T', 'T'],\r\n\t\t\t[0, 'T', 0]\r\n\t\t],\r\n\t\tcolor: '132, 61, 198'\r\n\t},\r\n\tZ: {\r\n\t\tshape: [\r\n\t\t\t['Z', 'Z', 0],\r\n\t\t\t[0, 'Z', 'Z'],\r\n\t\t\t[0, 0, 0]\r\n\t\t],\r\n\t\tcolor: '227, 78, 78'\r\n\t}\r\n};\r\n\r\nexport default TETROMINOS;\r\n","import TETROMINOS from './tetrominos';\r\n\r\nexport const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 15;\r\nexport const LEVEL_CHANGE_AT = 5;\r\nconst DROP_TIME = 1000;\r\nconst linePoints = [40, 100, 300, 1200];\r\n\r\nexport const createStage = () =>\r\n\tArray.from(Array(STAGE_HEIGHT), () =>\r\n\t\tnew Array(STAGE_WIDTH).fill([0, 'clear'])\r\n\t);\r\n\r\nexport const generateTetrominos = () => {\r\n\tconst tetrominos = 'IJLOSTZ';\r\n\tconst randChar = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\treturn TETROMINOS[randChar];\r\n};\r\n\r\nexport const detectCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\tconst { tetromino, position } = player;\r\n\tfor (let y = 0; y < tetromino.length; y++) {\r\n\t\tfor (let x = 0; x < tetromino[y].length; x++) {\r\n\t\t\t// Check for a tetromino cell\r\n\t\t\tif (tetromino[y][x] !== 0) {\r\n\t\t\t\t// Move should be inside the play area\r\n\t\t\t\t// both in height and width\r\n\t\t\t\tconst row = y + position.y + moveY;\r\n\t\t\t\tconst column = x + position.x + moveX;\r\n\t\t\t\t// Cell we're moving isn't set to 'clear'\r\n\t\t\t\tif (\r\n\t\t\t\t\t!stage[row] ||\r\n\t\t\t\t\t!stage[row][column] ||\r\n\t\t\t\t\tstage[row][column][1] !== 'clear'\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const rotate = (matrix, direction) => {\r\n\t// Transpose the rows to columns\r\n\tconst rotatedMatrix = matrix.map((_, index) =>\r\n\t\tmatrix.map(col => col[index])\r\n\t);\r\n\t// Reverse each row as per the direction\r\n\tif (direction > 0) {\r\n\t\treturn rotatedMatrix.map(row => row.reverse());\r\n\t}\r\n\treturn rotatedMatrix.reverse();\r\n};\r\n\r\nexport const calculateScore = (level, rows) =>\r\n\tlinePoints[rows - 1] * (level + 1);\r\n\r\nexport const changeDropTimeWithLevel = level =>\r\n\tDROP_TIME / Math.pow(level + 1, 0.5);\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../helpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\tconst [stage, setStage] = useState(createStage());\r\n\tconst [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst { tetromino, position, collided } = player;\r\n\r\n\t\tsetRowsCleared(0);\r\n\r\n\t\tconst sweepRows = stage =>\r\n\t\t\tstage.reduce((acc, curr) => {\r\n\t\t\t\t// Check if there are no 0s in any of the cells in current row\r\n\t\t\t\tif (curr.findIndex(cell => cell[0] === 0) === -1) {\r\n\t\t\t\t\t// Increament rowsCleared state\r\n\t\t\t\t\tsetRowsCleared(prev => prev + 1);\r\n\t\t\t\t\t// Push a cleaered row at the beginning\r\n\t\t\t\t\tacc.unshift(new Array(stage[0].length).fill([0, 'clear']));\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}\r\n\t\t\t\tacc.push(curr);\r\n\t\t\t\treturn acc;\r\n\t\t\t}, []);\r\n\r\n\t\tconst updateStage = prevStage => {\r\n\t\t\t// Use for loop\r\n\t\t\tconst newStage = prevStage.map(row =>\r\n\t\t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n\t\t\t);\r\n\t\t\t// Draw the tetromino\r\n\t\t\ttetromino.forEach((row, y) => {\r\n\t\t\t\trow.forEach((value, x) => {\r\n\t\t\t\t\tif (value !== 0) {\r\n\t\t\t\t\t\tnewStage[y + position.y][x + position.x] = [\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t`${collided ? 'merged' : 'clear'}`\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t// reset the player if collided\r\n\t\t\tif (collided) {\r\n\t\t\t\tresetPlayer();\r\n\t\t\t\treturn sweepRows(newStage);\r\n\t\t\t}\r\n\t\t\treturn newStage;\r\n\t\t};\r\n\r\n\t\tsetStage(prev => updateStage(prev));\r\n\t}, [player, resetPlayer]);\r\n\r\n\treturn [stage, setStage, rowsCleared];\r\n};\r\n","import { useEffect, useState, useCallback } from 'react';\r\nimport { calculateScore } from '../helpers';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [rows, setRows] = useState(0);\r\n\tconst [level, setLevel] = useState(0);\r\n\r\n\tconst populateScore = useCallback(() => {\r\n\t\t// We have more than 1 rows cleared\r\n\t\tif (rowsCleared > 0) {\r\n\t\t\t// Tetris score calculation formula\r\n\t\t\tsetScore(prev => prev + calculateScore(level, rowsCleared));\r\n\t\t\tsetRows(prev => prev + rowsCleared);\r\n\t\t}\r\n\t}, [level, rowsCleared]);\r\n\r\n\tuseEffect(() => {\r\n\t\tpopulateScore();\r\n\t}, [populateScore]);\r\n\r\n\treturn [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledButton = styled.button`\r\n\tmargin: 0.3rem 2rem;\r\n\tpadding: 0.5rem 1rem;\r\n\tmin-height: 2rem;\r\n\twidth: 110%;\r\n\tborder-radius: 0.15rem;\r\n\tcolor: white;\r\n\tbackground: rgba(10, 153, 13);\r\n\tborder: none;\r\n\toutline: none;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n\tcursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { StyledButton } from './styles/StyledButton';\r\n\r\nconst Button = ({ startGame }) => {\r\n\treturn <StyledButton onClick={startGame}>Start Game</StyledButton>;\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: repeat(\r\n\t\t${props => props.height},\r\n\t\tcalc(34.35vw / ${props => props.width})\r\n\t);\r\n\tgrid-template-columns: repeat(${props => props.width}, 1fr);\r\n\tgrid-gap: 1px;\r\n\tborder: 3px solid #333;\r\n\twidth: 100%;\r\n\tmax-width: 39.5vw;\r\n\tbackground: #111;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\twidth: auto;\r\n\tbackground: rgba(${props => props.color}, 0.8);\r\n\tborder: ${props => (props.type === 0 ? 0 : '0.25rem solid')};\r\n\tborder-bottom-color: rgba(${props => props.color}, 0.25);\r\n\tborder-right-color: rgba(${props => props.color}, 1);\r\n\tborder-top-color: rgba(${props => props.color}, 1);\r\n\tborder-left-color: rgba(${props => props.color}, 0.5);\r\n`;\r\n","import React, { memo } from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\n\r\nimport TETROMINOS from '../helpers/tetrominos';\r\n\r\nconst Cell = ({ type }) => {\r\n\treturn <StyledCell type={type} color={TETROMINOS[type].color} />;\r\n};\r\n\r\nexport default memo(Cell);\r\n","import React from 'react';\r\n\r\nimport { StyledStage } from './styles/StyledStage';\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => {\r\n\treturn (\r\n\t\t<StyledStage width={stage[0].length} height={stage.length}>\r\n\t\t\t{stage.map(row =>\r\n\t\t\t\trow.map((cell, x) => <Cell key={x} type={cell[0]} />)\r\n\t\t\t)}\r\n\t\t</StyledStage>\r\n\t);\r\n};\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCard = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin: 0.3rem 2rem;\r\n\tpadding: 0.5rem;\r\n\tborder: 0.1rem solid #333;\r\n\tmin-height: 1rem;\r\n\twidth: 100%;\r\n\tborder-radius: 0.15rem;\r\n\tcolor: ${props => (props.gameOver ? 'red' : '#aaa')};\r\n\tbackground: #111;\r\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\r\n`;\r\n","import React from 'react';\r\nimport { StyledCard } from './styles/StyledCard';\r\n\r\nconst Card = ({ gameOver, text }) => {\r\n\treturn <StyledCard gameOver={gameOver}>{text}</StyledCard>;\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState } from 'react';\r\n\r\nimport './assets/stylesheets/style.css';\r\nimport {\r\n\tStyledTetrisWrapper,\r\n\tStyledTetris\r\n} from './components/styles/StyledTetris';\r\n\r\nimport { useInterval } from './hooks/useInterval';\r\nimport { usePlayer } from './hooks/usePlayer';\r\nimport { useStage } from './hooks/useStage';\r\nimport { useGameStatus } from './hooks/useGameStatus';\r\n\r\nimport {\r\n\tcreateStage,\r\n\tdetectCollision,\r\n\tchangeDropTimeWithLevel,\r\n\tLEVEL_CHANGE_AT\r\n} from './helpers';\r\n\r\nimport Button from './components/Button';\r\nimport Stage from './components/Stage';\r\nimport Card from './components/Card';\r\n\r\nconst App = () => {\r\n\tconst [dropTime, setDropTime] = useState(null);\r\n\tconst [gameOver, setGameOver] = useState(false);\r\n\r\n\tconst [\r\n\t\tplayer,\r\n\t\tupdatePlayerPosition,\r\n\t\trotatePlayer,\r\n\t\tresetPlayer\r\n\t] = usePlayer();\r\n\tconst [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n\tconst [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n\t\trowsCleared\r\n\t);\r\n\r\n\tconst movePlayerSideWise = direction => {\r\n\t\tconst position = { x: direction, y: 0 };\r\n\t\tif (!detectCollision(player, stage, position)) {\r\n\t\t\tupdatePlayerPosition(position);\r\n\t\t}\r\n\t};\r\n\r\n\tconst startGame = () => {\r\n\t\tsetStage(createStage());\r\n\t\tsetDropTime(changeDropTimeWithLevel(0));\r\n\t\tresetPlayer();\r\n\t\tsetGameOver(false);\r\n\t\tsetScore(0);\r\n\t\tsetRows(0);\r\n\t\tsetLevel(0);\r\n\t};\r\n\r\n\tconst drop = () => {\r\n\t\tif (rows > (level + 1) * LEVEL_CHANGE_AT) {\r\n\t\t\tsetLevel(prev => prev + 1);\r\n\t\t\tsetDropTime(changeDropTimeWithLevel(level));\r\n\t\t}\r\n\t\tif (!detectCollision(player, stage, { x: 0, y: 1 })) {\r\n\t\t\tupdatePlayerPosition({ x: 0, y: 1, collided: false });\r\n\t\t} else {\r\n\t\t\t// Game over\r\n\t\t\tif (player.position.y < 1) {\r\n\t\t\t\tsetGameOver(true);\r\n\t\t\t\tsetDropTime(null);\r\n\t\t\t}\r\n\t\t\tupdatePlayerPosition({ x: 0, y: 0, collided: true });\r\n\t\t}\r\n\t};\r\n\r\n\tconst onKeyDownRelease = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\tif (keyCode === 40) {\r\n\t\t\t\tsetDropTime(changeDropTimeWithLevel(level));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst dropPlayer = () => {\r\n\t\tsetDropTime(null);\r\n\t\tdrop();\r\n\t};\r\n\r\n\tconst move = ({ keyCode }) => {\r\n\t\tif (!gameOver) {\r\n\t\t\t// Left\r\n\t\t\tif (keyCode === 37) {\r\n\t\t\t\tmovePlayerSideWise(-1);\r\n\t\t\t}\r\n\t\t\t// Right\r\n\t\t\telse if (keyCode === 39) {\r\n\t\t\t\tmovePlayerSideWise(1);\r\n\t\t\t}\r\n\t\t\t// Down\r\n\t\t\telse if (keyCode === 40) {\r\n\t\t\t\tdropPlayer();\r\n\t\t\t}\r\n\t\t\t// Rotate with up arrow\r\n\t\t\telse if (keyCode === 38) {\r\n\t\t\t\trotatePlayer(stage, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tuseInterval(() => {\r\n\t\tdrop();\r\n\t}, dropTime);\r\n\r\n\tconsole.log('*** Re-render ***');\r\n\r\n\treturn (\r\n\t\t<StyledTetrisWrapper\r\n\t\t\trole='button'\r\n\t\t\ttabIndex='0'\r\n\t\t\tonKeyDown={e => move(e)}\r\n\t\t\tonKeyUp={e => onKeyDownRelease(e)}\r\n\t\t>\r\n\t\t\t<StyledTetris>\r\n\t\t\t\t<Stage stage={stage} />\r\n\t\t\t\t<aside>\r\n\t\t\t\t\t<Card text={`Score: ${score}`} />\r\n\t\t\t\t\t<Card text={`Rows: ${rows}`} />\r\n\t\t\t\t\t<Card text={`Level: ${level}`} />\r\n\t\t\t\t\t{gameOver && (\r\n\t\t\t\t\t\t<Card gameOver={gameOver} text='Game Over...' />\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<Button startGame={startGame} />\r\n\t\t\t\t</aside>\r\n\t\t\t</StyledTetris>\r\n\t\t</StyledTetrisWrapper>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport { generateTetrominos, rotate, detectCollision } from '../helpers';\r\n\r\nexport const usePlayer = () => {\r\n\t// Initialize with a blank stage\r\n\tconst [player, setPlayer] = useState({\r\n\t\tposition: { x: 0, y: 0 },\r\n\t\ttetromino: [[0]],\r\n\t\tcollided: false\r\n\t});\r\n\r\n\tconst updatePlayerPosition = ({ x, y, collided }) => {\r\n\t\tsetPlayer(prev => ({\r\n\t\t\t...prev,\r\n\t\t\tposition: { x: (prev.position.x += x), y: (prev.position.y += y) },\r\n\t\t\tcollided\r\n\t\t}));\r\n\t};\r\n\r\n\tconst rotatePlayer = (stage, direction) => {\r\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\r\n\r\n\t\tconst xPosition = clonedPlayer.position.x;\r\n\t\tlet offset = 1;\r\n\r\n\t\t// Move a tetromino back and forth in the same row\r\n\t\twhile (detectCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n\t\t\tclonedPlayer.position.x += offset;\r\n\t\t\toffset = -(offset + offset > 0 ? 1 : -1);\r\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\r\n\t\t\t\trotate(clonedPlayer.tetromino, -direction);\r\n\t\t\t\tclonedPlayer.position.x = xPosition;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetPlayer(clonedPlayer);\r\n\t};\r\n\r\n\tconst resetPlayer = useCallback(() => {\r\n\t\tsetPlayer({\r\n\t\t\tposition: { x: 0, y: 0 },\r\n\t\t\ttetromino: generateTetrominos().shape,\r\n\t\t\tcollided: false\r\n\t\t});\r\n\t}, []);\r\n\r\n\treturn [player, updatePlayerPosition, rotatePlayer, resetPlayer];\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport const useInterval = (callback, delay) => {\r\n\tconst savedCallback = useRef();\r\n\t// Remember the latest callback.\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = callback;\r\n\t}, [callback]);\r\n\r\n\t// Set up the interval.\r\n\tuseEffect(() => {\r\n\t\tfunction tick() {\r\n\t\t\tsavedCallback.current();\r\n\t\t}\r\n\t\tif (delay !== null) {\r\n\t\t\tconst id = setInterval(tick, delay);\r\n\t\t\treturn () => {\r\n\t\t\t\tclearInterval(id);\r\n\t\t\t};\r\n\t\t}\r\n\t}, [delay]);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/bg.b691bb70.png\";"],"sourceRoot":""}